package main

import (
	"bufio"
	"bytes"
	"encoding/binary"
	"fmt"
	"net"
	"os"
	"strings"
)

func main() {
	// Connect to the server
	conn, err := net.Dial("tcp", "localhost:8888")
	if err != nil {
		fmt.Println("Error connecting:", err.Error())
		return
	}
	defer conn.Close()

	// Create a reader to read from stdin
	reader := bufio.NewReader(os.Stdin)
	socketReader := bufio.NewReader(conn)

	// Continuously send messages
	for {
		// Read user input from the terminal
		fmt.Print("Enter ISO 8583 message: ")
		requestString, _ := reader.ReadString('\n')

		requestString = strings.TrimSpace(requestString)
		fmt.Println(requestString)

		requestLength := len(requestString) + 2

		buf := new(bytes.Buffer)

		// Write the bodyLength as a 16-bit integer (2 bytes) in big-endian byte order
		if err := binary.Write(buf, binary.BigEndian, uint16(requestLength)); err != nil {
			fmt.Println("Error writing body length:", err)
			return
		}

		// Write the response bytes to the connection.
		conn.Write(buf.Bytes())
		conn.Write([]byte(requestString))

		header := make([]byte, 2) // Assuming a 2-byte header for simplicity.
		_, err := socketReader.Read(header)
		if err != nil {
			fmt.Println("Error reading header:", err)
			return
		}

		// Parse the header to get the length of the ISO 8583 message body.
		bodyLength := int(header[0])<<8 | int(header[1])

		// Read the ISO 8583 message body.
		body := make([]byte, bodyLength)
		_, err = socketReader.Read(body)
		if err != nil {
			fmt.Println("Error reading body:", err)
			return
		}

		fmt.Println(string(body))

		/*
			message = strings.TrimRight(message, "\r\n")

			// Send message to the server
			_, err = fmt.Fprintf(conn, message+"\n")
			if err != nil {
				fmt.Println("Error sending message:", err.Error())
				return
			}

			// Read response from the server
			response, err := bufio.NewReader(conn).ReadString('\n')
			if err != nil {
				fmt.Println("Error reading response:", err.Error())
				return
			}

			// Print the response
			fmt.Println("Response from server:", response)
		*/
	}
}
